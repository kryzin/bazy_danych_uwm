--- nazwa pracy dla ID
CREATE OR REPLACE FUNCTION get_job_name(job_id IN VARCHAR2)
RETURN VARCHAR2 IS
    job_name VARCHAR2(50);
BEGIN
    SELECT job_title INTO job_name FROM jobs WHERE job_id = job_id;
    RETURN job_name;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Job ID not found.');
END;
/
--- roczne zarobki
CREATE OR REPLACE FUNCTION annual_salary(emp_id IN NUMBER)
RETURN NUMBER IS
    salary NUMBER;
    commission NUMBER;
BEGIN
    SELECT salary, NVL(commission_pct, 0) INTO salary, commission
    FROM employees WHERE employee_id = emp_id;
    RETURN (salary * 12) + (salary * commission);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Employee ID not found.');
END;
/
--- numer kierunkowy
CREATE OR REPLACE FUNCTION extract_area_code(phone_number IN VARCHAR2)
RETURN VARCHAR2 IS
    area_code VARCHAR2(10);
BEGIN
    area_code := REGEXP_SUBSTR(phone_number, '\((\d+)\)', 1, 1, NULL, 1);
    RETURN area_code;
END;
/
--- pierwsza i ostatnia litera wielka
CREATE OR REPLACE FUNCTION capitalize_first_last(input_str IN VARCHAR2)
RETURN VARCHAR2 IS
    result_str VARCHAR2(100);
BEGIN
    result_str := UPPER(SUBSTR(input_str, 1, 1)) || 
                  LOWER(SUBSTR(input_str, 2, LENGTH(input_str) - 2)) || 
                  UPPER(SUBSTR(input_str, -1, 1));
    RETURN result_str;
END;
/
--- PESEL na datę urodzin
CREATE OR REPLACE FUNCTION pesel_to_date(pesel IN VARCHAR2)
RETURN DATE IS
    birth_date DATE;
    year_part VARCHAR2(4);
    month_part VARCHAR2(2);
    day_part VARCHAR2(2);
BEGIN
    year_part := CASE
                    WHEN SUBSTR(pesel, 3, 1) IN ('2', '3') THEN '20' || SUBSTR(pesel, 1, 2)
                    ELSE '19' || SUBSTR(pesel, 1, 2)
                 END;
    month_part := TO_CHAR(MOD(SUBSTR(pesel, 3, 2), 20), '00');
    day_part := SUBSTR(pesel, 5, 2);
    birth_date := TO_DATE(year_part || '-' || month_part || '-' || day_part, 'YYYY-MM-DD');
    RETURN birth_date;
END;
/
--- liczba pracowników i departamentów
CREATE OR REPLACE FUNCTION employees_departments_in_country(country_name IN VARCHAR2)
RETURN VARCHAR2 IS
    emp_count NUMBER;
    dept_count NUMBER;
BEGIN
    SELECT COUNT(e.employee_id), COUNT(DISTINCT d.department_id)
    INTO emp_count, dept_count
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id
    JOIN locations l ON d.location_id = l.location_id
    JOIN countries c ON l.country_id = c.country_id
    WHERE c.country_name = country_name;
    RETURN 'Employees: ' || emp_count || ', Departments: ' || dept_count;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20003, 'Country not found.');
END;
/
--- archiwizacja usuniętych
CREATE TABLE archive_departments (
    id NUMBER,
    name VARCHAR2(50),
    close_date DATE,
    last_manager VARCHAR2(100)
);

CREATE OR REPLACE TRIGGER archive_departments_trigger
AFTER DELETE ON departments
FOR EACH ROW
BEGIN
    INSERT INTO archive_departments VALUES (
        :OLD.department_id,
        :OLD.department_name,
        SYSDATE,
        (SELECT first_name || ' ' || last_name FROM employees WHERE employee_id = :OLD.manager_id)
    );
END;
/
--- widełki wynagrodzeń + logowanie
CREATE TABLE salary_thieves (
    id NUMBER,
    username VARCHAR2(50),
    change_time DATE
);

CREATE OR REPLACE TRIGGER salary_check_trigger
BEFORE INSERT OR UPDATE ON employees
FOR EACH ROW
BEGIN
    IF :NEW.salary NOT BETWEEN 2000 AND 26000 THEN
        INSERT INTO salary_thieves VALUES (:NEW.employee_id, USER, SYSDATE);
        RAISE_APPLICATION_ERROR(-20004, 'Salary out of range.');
    END IF;
END;
/
--- auto-increment w employees
CREATE SEQUENCE emp_seq START WITH 1000 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER emp_auto_increment
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    :NEW.employee_id := emp_seq.NEXTVAL;
END;
/
--- zabronione na JOB_GRADE
CREATE OR REPLACE TRIGGER prevent_job_grades_modification
BEFORE INSERT OR UPDATE OR DELETE ON job_grades
BEGIN
    RAISE_APPLICATION_ERROR(-20005, 'Operation not allowed on JOB_GRADES table.');
END;
/
--- blokowanie zmian widełek wynagrodzeń
CREATE OR REPLACE TRIGGER prevent_salary_change
BEFORE UPDATE ON jobs
FOR EACH ROW
BEGIN
    :NEW.min_salary := :OLD.min_salary;
    :NEW.max_salary := :OLD.max_salary;
END;
/
--- paczka z funkcjami i procedurami
CREATE OR REPLACE PACKAGE employee_pkg AS
    FUNCTION get_employee_full_name(p_employee_id IN NUMBER) RETURN VARCHAR2;
    FUNCTION calculate_annual_salary(p_employee_id IN NUMBER) RETURN NUMBER;
    FUNCTION validate_salary(p_salary IN NUMBER) RETURN BOOLEAN;

    PROCEDURE add_employee(
        p_first_name IN EMPLOYEES.first_name%TYPE,
        p_last_name IN EMPLOYEES.last_name%TYPE,
        p_salary IN EMPLOYEES.salary%TYPE,
        p_job_id IN EMPLOYEES.job_id%TYPE,
        p_department_id IN EMPLOYEES.department_id%TYPE
    );

    PROCEDURE update_employee_salary(
        p_employee_id IN EMPLOYEES.employee_id%TYPE,
        p_new_salary IN EMPLOYEES.salary%TYPE
    );

    PROCEDURE delete_employee(p_employee_id IN EMPLOYEES.employee_id%TYPE);

    INVALID_SALARY EXCEPTION;
END employee_pkg;
/
CREATE OR REPLACE PACKAGE BODY employee_pkg AS
    FUNCTION get_employee_full_name(p_employee_id IN NUMBER) RETURN VARCHAR2 IS
        full_name VARCHAR2(100);
    BEGIN
        SELECT first_name || ' ' || last_name
        INTO full_name
        FROM EMPLOYEES
        WHERE employee_id = p_employee_id;

        RETURN full_name;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Employee not found.');
    END get_employee_full_name;

    FUNCTION calculate_annual_salary(p_employee_id IN NUMBER) RETURN NUMBER IS
        salary NUMBER;
    BEGIN
        SELECT salary * 12
        INTO salary
        FROM EMPLOYEES
        WHERE employee_id = p_employee_id;

        RETURN salary;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20002, 'Employee not found.');
    END calculate_annual_salary;

    FUNCTION validate_salary(p_salary IN NUMBER) RETURN BOOLEAN IS
    BEGIN
        IF p_salary < 1000 OR p_salary > 20000 THEN
            RETURN FALSE;
        END IF;
        RETURN TRUE;
    END validate_salary;

    PROCEDURE add_employee(
        p_first_name IN EMPLOYEES.first_name%TYPE,
        p_last_name IN EMPLOYEES.last_name%TYPE,
        p_salary IN EMPLOYEES.salary%TYPE,
        p_job_id IN EMPLOYEES.job_id%TYPE,
        p_department_id IN EMPLOYEES.department_id%TYPE
    ) IS
        new_employee_id NUMBER;
    BEGIN
        IF NOT validate_salary(p_salary) THEN
            RAISE INVALID_SALARY;
        END IF;

        SELECT EMPLOYEES_SEQ.NEXTVAL INTO new_employee_id FROM DUAL;

        INSERT INTO EMPLOYEES (employee_id, first_name, last_name, salary, job_id, department_id)
        VALUES (new_employee_id, p_first_name, p_last_name, p_salary, p_job_id, p_department_id);

        DBMS_OUTPUT.PUT_LINE('Employee added: ' || p_first_name || ' ' || p_last_name);
    EXCEPTION
        WHEN INVALID_SALARY THEN
            RAISE_APPLICATION_ERROR(-20003, 'Invalid salary range.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END add_employee;

    PROCEDURE update_employee_salary(
        p_employee_id IN EMPLOYEES.employee_id%TYPE,
        p_new_salary IN EMPLOYEES.salary%TYPE
    ) IS
    BEGIN
        IF NOT validate_salary(p_new_salary) THEN
            RAISE INVALID_SALARY;
        END IF;

        UPDATE EMPLOYEES
        SET salary = p_new_salary
        WHERE employee_id = p_employee_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'Employee not found.');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Salary updated for employee ID: ' || p_employee_id);
    EXCEPTION
        WHEN INVALID_SALARY THEN
            RAISE_APPLICATION_ERROR(-20005, 'Invalid salary range.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END update_employee_salary;

    PROCEDURE delete_employee(p_employee_id IN EMPLOYEES.employee_id%TYPE) IS
    BEGIN
        DELETE FROM EMPLOYEES
        WHERE employee_id = p_employee_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20006, 'Employee not found.');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Employee deleted with ID: ' || p_employee_id);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END delete_employee;
END employee_pkg;
/
--- paczka dla REGIONS
CREATE OR REPLACE PACKAGE regions_pkg AS
    FUNCTION get_region_name(p_region_id IN REGIONS.region_id%TYPE) RETURN VARCHAR2;
    FUNCTION count_regions RETURN NUMBER;

    PROCEDURE create_region(p_region_id IN REGIONS.region_id%TYPE, p_region_name IN REGIONS.region_name%TYPE);
    PROCEDURE update_region_name(p_region_id IN REGIONS.region_id%TYPE, p_new_name IN REGIONS.region_name%TYPE);
    PROCEDURE delete_region(p_region_id IN REGIONS.region_id%TYPE);
    PROCEDURE list_regions(p_filter IN VARCHAR2 DEFAULT NULL);
END regions_pkg;
/
CREATE OR REPLACE PACKAGE BODY regions_pkg AS
    FUNCTION get_region_name(p_region_id IN REGIONS.region_id%TYPE) RETURN VARCHAR2 IS
        region_name VARCHAR2(50);
    BEGIN
        SELECT region_name
        INTO region_name
        FROM REGIONS
        WHERE region_id = p_region_id;

        RETURN region_name;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'Region not found.');
    END get_region_name;

    FUNCTION count_regions RETURN NUMBER IS
        region_count NUMBER;
    BEGIN
        SELECT COUNT(*)
        INTO region_count
        FROM REGIONS;

        RETURN region_count;
    END count_regions;

    PROCEDURE create_region(p_region_id IN REGIONS.region_id%TYPE, p_region_name IN REGIONS.region_name%TYPE) IS
    BEGIN
        INSERT INTO REGIONS (region_id, region_name)
        VALUES (p_region_id, p_region_name);

        DBMS_OUTPUT.PUT_LINE('Region created: ' || p_region_name || ' (ID: ' || p_region_id || ')');
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-20002, 'Region ID already exists.');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END create_region;

    PROCEDURE update_region_name(p_region_id IN REGIONS.region_id%TYPE, p_new_name IN REGIONS.region_name%TYPE) IS
    BEGIN
        UPDATE REGIONS
        SET region_name = p_new_name
        WHERE region_id = p_region_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'Region not found.');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Region updated: ID ' || p_region_id || ', New Name: ' || p_new_name);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END update_region_name;

    PROCEDURE delete_region(p_region_id IN REGIONS.region_id%TYPE) IS
    BEGIN
        DELETE FROM REGIONS
        WHERE region_id = p_region_id;

        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'Region not found.');
        END IF;

        DBMS_OUTPUT.PUT_LINE('Region deleted: ID ' || p_region_id);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END delete_region;

    PROCEDURE list_regions(p_filter IN VARCHAR2 DEFAULT NULL) IS
        CURSOR region_cursor IS
            SELECT region_id, region_name
            FROM REGIONS
            WHERE p_filter IS NULL OR LOWER(region_name) LIKE '%' || LOWER(p_filter) || '%'
            ORDER BY region_name;

        region_record REGIONS%ROWTYPE;
    BEGIN
        OPEN region_cursor;

        DBMS_OUTPUT.PUT_LINE('Regions List:');
        DBMS_OUTPUT.PUT_LINE('-------------------------------');
        LOOP
            FETCH region_cursor INTO region_record;
            EXIT WHEN region_cursor%NOTFOUND;

            DBMS_OUTPUT.PUT_LINE('ID: ' || region_record.region_id || ', Name: ' || region_record.region_name);
        END LOOP;

        CLOSE region_cursor;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
    END list_regions;

END regions_pkg;
/
